import numpy as np
from dimod import ExactSolver
from dwave.system import DWaveSampler, EmbeddingComposite
import dwave.inspector
import pandas as pd
pd.set_option("display.max_rows", 1000000)


# sampleset.first.sample takes the lowest energy sample result, without cutting any data


print("The correct string is unknown")

QUBO_ex9_lambda10 = np.array( [ [604, -450, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -150, 0, -600, 0, 0, 0, 0, 0, -600] ,
[0, 212, 0, 0, 0, 0, 0, 0, 0, -240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 480, -600, 0, 0, 0, 0, 0, 0] ,
[0, 0, -139, 0, 0, 180, 0, 0, 0, 0, 240, 0, 0, -40, 0, 0, 0, 0, 0, 180, 0, 0, 0, 0, 0, 0, 120, 0, -160, 0, 0, 0] ,
[0, 0, 0, 151, -240, 0, 0, 0, 0, 0, 0, 0, 0, 120, 180, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -320, 0, 0, 0, 0] ,
[0, 0, 0, 0, 212, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 0, 0, 0, 0, 0, 0, 0, -320, 0, 0, 0, 0] ,
[0, 0, 0, 0, 0, 61, -120, 0, 0, 0, -60, 0, 0, 0, 0, 0, 0, 0, 0, -60, 0, 0, 0, 0, 0, 0, -60, 0, -160, 0, 0, 0] ,
[0, 0, 0, 0, 0, 0, -239, 0, 0, 0, 0, 0, 0, 0, 0, 0, 450, 720, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -160, 0, 0, 0] ,
[0, 0, 0, 0, 0, 0, 0, 45, -110, -110, 0, 0, 0, 0, 0, 330, 0, 0, 0, 0, 0, 0, 0, 0, -150, -600, 0, 0, 0, -110, 0, 0] ,
[0, 0, 0, 0, 0, 0, 0, 0, -149, -110, 0, 0, 160, 0, 0, 330, 0, 0, 0, 0, 0, 0, -120, 0, 0, 0, 0, 0, 0, -110, 0, 0] ,
[0, 0, 0, 0, 0, 0, 0, 0, 0, -298, 0, 0, 0, 0, 0, 440, 0, 0, 0, 0, 0, 0, 0, 0, 320, 0, 0, 0, 0, -110, 0, 0] ,
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -117, -140, 0, 0, 0, 0, 140, 0, 0, -60, 0, 140, 0, 0, 0, 0, -60, 0, 0, 0, -280, 0] ,
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 101, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -280, 0] ,
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -39, 0, 0, 0, 0, 0, 0, 0, -80, 0, 240, 0, 0, 0, 0, -320, 0, 0, 0, 0] ,
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, -90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -160, 0, 0, 0] ,
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -139, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0] ,
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -387, 0, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 220, 0, 0] ,
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, -450, 0, 0, 0, -280, 0, 0, 0, 0, 0, 0, 0, 0, -280, 0] ,
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -417, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] ,
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -107, 0, 140, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] ,
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -89, 0, 0, 0, 0, 0, 0, -60, 0, 0, 0, 0, 0] ,
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, -320, 0, 0, 0, 0] ,
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 595, -450, 0, 0, 0, 0, 0, 0, 0, -280, -600] ,
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 332, 0, 0, 0, 0, 0, 0, 0, 0, -600] ,
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 0, 0, 0, 0, 0, 0, 0, -600] ,
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -86, -600, 0, 0, 0, 0, 0, 0] ,
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 600, 0, 0, 0, 0, 0, 0] ,
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] ,
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 320, 0, 0, 0, 0] ,
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 0, 0, 0] ,
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] ,
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 280, 0] ,
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 600] ] )



QUBO_ex9_lambda3 = np.array( [ [184, -135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -45, 0, -180, 0, 0, 0, 0, 0, -180] ,
[0, 65, 0, 0, 0, 0, 0, 0, 0, -72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 144, -180, 0, 0, 0, 0, 0, 0] ,
[0, 0, -41, 0, 0, 54, 0, 0, 0, 0, 72, 0, 0, -12, 0, 0, 0, 0, 0, 54, 0, 0, 0, 0, 0, 0, 36, 0, -48, 0, 0, 0] ,
[0, 0, 0, 46, -72, 0, 0, 0, 0, 0, 0, 0, 0, 36, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -96, 0, 0, 0, 0] ,
[0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, -96, 0, 0, 0, 0] ,
[0, 0, 0, 0, 0, 19, -36, 0, 0, 0, -18, 0, 0, 0, 0, 0, 0, 0, 0, -18, 0, 0, 0, 0, 0, 0, -18, 0, -48, 0, 0, 0] ,
[0, 0, 0, 0, 0, 0, -71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 135, 216, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -48, 0, 0, 0] ,
[0, 0, 0, 0, 0, 0, 0, 17, -33, -33, 0, 0, 0, 0, 0, 99, 0, 0, 0, 0, 0, 0, 0, 0, -45, -180, 0, 0, 0, -33, 0, 0] ,
[0, 0, 0, 0, 0, 0, 0, 0, -44, -33, 0, 0, 48, 0, 0, 99, 0, 0, 0, 0, 0, 0, -36, 0, 0, 0, 0, 0, 0, -33, 0, 0] ,
[0, 0, 0, 0, 0, 0, 0, 0, 0, -88, 0, 0, 0, 0, 0, 132, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, -33, 0, 0] ,
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -33, -42, 0, 0, 0, 0, 42, 0, 0, -18, 0, 42, 0, 0, 0, 0, -18, 0, 0, 0, -84, 0] ,
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -84, 0] ,
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -11, 0, 0, 0, 0, 0, 0, 0, -24, 0, 72, 0, 0, 0, 0, -96, 0, 0, 0, 0] ,
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, -27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -48, 0, 0, 0] ,
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -41, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0] ,
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -114, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 0, 0] ,
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, -135, 0, 0, 0, -84, 0, 0, 0, 0, 0, 0, 0, 0, -84, 0] ,
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] ,
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 0, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] ,
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -26, 0, 0, 0, 0, 0, 0, -18, 0, 0, 0, 0, 0] ,
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, -96, 0, 0, 0, 0] ,
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 182, -135, 0, 0, 0, 0, 0, 0, 0, -84, -180] ,
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 101, 0, 0, 0, 0, 0, 0, 0, 0, -180] ,
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, -180] ,
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -23, -180, 0, 0, 0, 0, 0, 0] ,
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 180, 0, 0, 0, 0, 0, 0] ,
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] ,
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0] ,
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0] ,
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] ,
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0] ,
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 180] ] )


sampler = EmbeddingComposite(DWaveSampler())
sampleset = sampler.sample_qubo(- QUBO_ex9_lambda3, num_reads=5000, label="EX9: 16 nodes, 25 transactions, lambda0=3")
print(sampleset)

'''
sampler = ExactSolver()
sampleset = sampler.sample_qubo(- QUBO_ex7_lambda8)
print(sampleset)
'''

with open('output.txt', mode='w') as file_object:
    for datum in sampleset.data(fields=['sample', 'energy', 'num_occurrences']):
        print(datum,file=file_object)


dwave.inspector.show(sampleset)

